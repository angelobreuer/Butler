<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Butler</name>
    </assembly>
    <members>
        <member name="T:Butler.IRootContainer">
            <summary>
                Interface for a root container.
            </summary>
        </member>
        <member name="T:Butler.Lifetime.ILifetimeManager">
            <summary>
                Interface for lifetime managers.
            </summary>
        </member>
        <member name="M:Butler.Lifetime.ILifetimeManager.Resolve(System.Type,System.Object)">
            <summary>
                Tries to resolve an object from the manager.
            </summary>
            <param name="serviceType">the type of the service being resolved</param>
            <param name="scope">
                the service scope; if <see langword="null"/> then the scope is global
            </param>
            <returns>the resolved service; or default if the service could not be resolved</returns>
        </member>
        <member name="M:Butler.Lifetime.ILifetimeManager.TrackInstance(System.Type,System.Object,System.Object)">
            <summary>
                Tracks the specified <paramref name="instance"/> for disposation.
            </summary>
            <param name="serviceType">the type of the service</param>
            <param name="scope">the <paramref name="scope"/> the instance was created for</param>
            <param name="instance">the instance to track</param>
        </member>
        <member name="T:Butler.Lifetime.IServiceLifetime">
            <summary>
                Interface for service lifetimes.
            </summary>
        </member>
        <member name="P:Butler.Lifetime.IServiceLifetime.Name">
            <summary>
                Gets the friendly, human-readable name of the service lifetime (e.g.
                <c>"Transient"</c>, <c>"Singleton"</c>, etc).
            </summary>
        </member>
        <member name="M:Butler.Lifetime.IServiceLifetime.CreateManager(Butler.Resolver.IServiceResolver)">
            <summary>
                Creates a lifetime manager for the service lifetime.
            </summary>
            <param name="resolver">the calling resolver</param>
            <returns>the <see cref="T:Butler.Lifetime.ILifetimeManager"/> instance</returns>
        </member>
        <member name="T:Butler.Lifetime.Lifetime">
            <summary>
                Basic implementation of an <see cref="T:Butler.Lifetime.IServiceLifetime"/>.
            </summary>
        </member>
        <member name="P:Butler.Lifetime.Lifetime.Transient">
            <summary>
                Gets a singleton instance of the transient <see cref="T:Butler.Lifetime.IServiceLifetime"/>. This
                <see cref="T:Butler.Lifetime.IServiceLifetime"/> creates a new instance of the service each request.
            </summary>
        </member>
        <member name="P:Butler.Lifetime.Lifetime.Scoped">
            <summary>
                Gets a singleton instance of the scoped <see cref="T:Butler.Lifetime.IServiceLifetime"/>. This
                <see cref="T:Butler.Lifetime.IServiceLifetime"/> creates for each scope key a new instance..
            </summary>
        </member>
        <member name="M:Butler.Lifetime.Lifetime.#ctor(System.String,Butler.Lifetime.LifetimeManagerFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Lifetime.Lifetime"/> class.
            </summary>
            <param name="name">
                the friendly, human-readable name of the service lifetime (e.g. <c>"Transient"</c>,
                <c>"Singleton"</c>, etc)
            </param>
            <param name="managerFactory">
                the <see cref="T:Butler.Lifetime.LifetimeManagerFactory"/> used to create
                <see cref="T:Butler.Lifetime.ILifetimeManager"/> instances
            </param>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="name"/> is <see langword="null"/>, empty or
                only consists of whitespaces.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="managerFactory"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Butler.Lifetime.Lifetime.ManagerFactory">
            <summary>
                Gets the <see cref="T:Butler.Lifetime.LifetimeManagerFactory"/> used to create
                <see cref="T:Butler.Lifetime.ILifetimeManager"/> instances.
            </summary>
        </member>
        <member name="P:Butler.Lifetime.Lifetime.Name">
            <summary>
                Gets the friendly, human-readable name of the service lifetime (e.g.
                <c>"Transient"</c>, <c>"Singleton"</c>, etc).
            </summary>
        </member>
        <member name="M:Butler.Lifetime.Lifetime.CreateManager(Butler.Resolver.IServiceResolver)">
            <summary>
                Creates a lifetime manager for the service lifetime.
            </summary>
            <param name="resolver">the calling resolver</param>
            <returns>the <see cref="T:Butler.Lifetime.ILifetimeManager"/> instance</returns>
        </member>
        <member name="T:Butler.Lifetime.LifetimeManagerFactory">
            <summary>
                A delegate for <see cref="T:Butler.Lifetime.ILifetimeManager"/> factories.
            </summary>
            <param name="resolver">the calling resolver</param>
            <returns>the lifetime manager</returns>
        </member>
        <member name="T:Butler.Lifetime.ScopedLifetimeManager">
            <summary>
                Implementation of an <see cref="T:Butler.Lifetime.ILifetimeManager"/> that re-creates services for each new
                service scope.
            </summary>
        </member>
        <member name="F:Butler.Lifetime.ScopedLifetimeManager._services">
            <summary>
                A dictionary containing the service instance keyed by a key-value pair which key is
                the type of the service (not the service implementation) and the value is the service
                scope key.
            </summary>
        </member>
        <member name="F:Butler.Lifetime.ScopedLifetimeManager._trackerLock">
            <summary>
                A <see cref="T:System.Threading.SemaphoreSlim"/> for the <see cref="F:Butler.Lifetime.ScopedLifetimeManager._services"/>.
            </summary>
        </member>
        <member name="F:Butler.Lifetime.ScopedLifetimeManager._disposed">
            <summary>
                A value indicating whether the lifetime manager was disposed (
                <see langword="true"/>); otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Butler.Lifetime.ScopedLifetimeManager.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Lifetime.ScopedLifetimeManager"/> class.
            </summary>
        </member>
        <member name="M:Butler.Lifetime.ScopedLifetimeManager.DisposeAsync">
            <summary>
                Disposes all tracked objects asynchronously.
            </summary>
        </member>
        <member name="M:Butler.Lifetime.ScopedLifetimeManager.Resolve(System.Type,System.Object)">
            <summary>
                Tries to resolve an object from the manager.
            </summary>
            <param name="serviceType">the type of the service being resolved</param>
            <param name="scope">
                the service scope; if <see langword="null"/> then the scope is global
            </param>
            <returns>the resolved service; or default if the service could not be resolved</returns>
        </member>
        <member name="M:Butler.Lifetime.ScopedLifetimeManager.TrackInstance(System.Type,System.Object,System.Object)">
            <summary>
                Tracks the specified <paramref name="instance"/> for disposation.
            </summary>
            <param name="serviceType">the type of the service</param>
            <param name="scope">the <paramref name="scope"/> the instance was created for</param>
            <param name="instance">the instance to track</param>
        </member>
        <member name="T:Butler.Lifetime.TransientLifetimeManager">
            <summary>
                Implementation of an <see cref="T:Butler.Lifetime.ILifetimeManager"/> that re-creates services each call.
            </summary>
        </member>
        <member name="F:Butler.Lifetime.TransientLifetimeManager._tracker">
            <summary>
                A list holding all tracked service instances.
            </summary>
        </member>
        <member name="F:Butler.Lifetime.TransientLifetimeManager._trackerLock">
            <summary>
                A <see cref="T:System.Threading.SemaphoreSlim"/> for the <see cref="F:Butler.Lifetime.TransientLifetimeManager._tracker"/>.
            </summary>
        </member>
        <member name="F:Butler.Lifetime.TransientLifetimeManager._disposed">
            <summary>
                A value indicating whether the lifetime manager was disposed (
                <see langword="true"/>); otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Butler.Lifetime.TransientLifetimeManager.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Lifetime.TransientLifetimeManager"/> class.
            </summary>
        </member>
        <member name="M:Butler.Lifetime.TransientLifetimeManager.DisposeAsync">
            <summary>
                Disposes all tracked objects asynchronously.
            </summary>
        </member>
        <member name="M:Butler.Lifetime.TransientLifetimeManager.Resolve(System.Type,System.Object)">
            <summary>
                Tries to resolve an object from the manager.
            </summary>
            <param name="serviceType">the type of the service being resolved</param>
            <param name="scope">
                the service scope; if <see langword="null"/> then the scope is global
            </param>
            <returns>the resolved service; or default if the service could not be resolved</returns>
        </member>
        <member name="M:Butler.Lifetime.TransientLifetimeManager.TrackInstance(System.Type,System.Object,System.Object)">
            <summary>
                Tracks the specified <paramref name="instance"/> for disposation.
            </summary>
            <param name="serviceType">the type of the service</param>
            <param name="scope">the <paramref name="scope"/> the instance was created for</param>
            <param name="instance">the instance to track</param>
        </member>
        <member name="T:Butler.Register.IServiceRegister">
            <summary>
                Interface for a service register.
            </summary>
        </member>
        <member name="P:Butler.Register.IServiceRegister.IsReadOnly">
            <summary>
                Gets a value indicating whether new service registrations are not allowed.
            </summary>
        </member>
        <member name="P:Butler.Register.IServiceRegister.Registrations">
            <summary>
                Gets all service registrations in the register.
            </summary>
        </member>
        <member name="M:Butler.Register.IServiceRegister.AsReadOnly">
            <summary>
                Creates a read-only instance of the service register.
            </summary>
            <returns>the read-only service register</returns>
        </member>
        <member name="M:Butler.Register.IServiceRegister.FindRegistration(System.Type)">
            <summary>
                Finds the service registration for the specified <paramref name="type"/>.
            </summary>
            <param name="type">the type of the service to find the registration for</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="type"/> is <see langword="null"/>.
            </exception>
            <returns>the service registration</returns>
        </member>
        <member name="M:Butler.Register.IServiceRegister.FindRegistration``1">
            <summary>
                Finds the service registration for the specified <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">the type of the service to find the service for</typeparam>
            <returns>the service registration</returns>
        </member>
        <member name="M:Butler.Register.IServiceRegister.Register(System.Type,Butler.Registration.IServiceRegistration,Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers the specified <paramref name="registration"/>.
            </summary>
            <param name="type">the type of the registration</param>
            <param name="registration">the registration to register</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="type"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="registration"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.IServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <paramref name="type"/> already exists
                and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.IServiceRegister.Register``1(Butler.Registration.IServiceRegistration,Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers the specified <paramref name="registration"/>.
            </summary>
            <typeparam name="TService">the type of the registration</typeparam>
            <param name="registration">the registration to register</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="registration"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.IServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.IServiceRegister.Register``2(Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a service registration for the specified <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">the type of the service</typeparam>
            <typeparam name="TImplementation">the type of the implementation of the service</typeparam>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.IServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.IServiceRegister.RegisterDirect``2(Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a direct parameterless constructor service.
            </summary>
            <typeparam name="TService">the type of the service</typeparam>
            <typeparam name="TImplementation">the type of the implementation of the service</typeparam>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.IServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.IServiceRegister.RegisterFactory``1(Butler.Resolver.ServiceFactory{``0},Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a service factory.
            </summary>
            <typeparam name="TService">the service the factory provides</typeparam>
            <param name="factory">the service factory</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="factory"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.IServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.IServiceRegister.RegisterFactory``2(Butler.Resolver.ServiceFactory{``1},Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a service factory.
            </summary>
            <typeparam name="TService">the service the factory provides</typeparam>
            <typeparam name="TImplementation">type of the service implementation</typeparam>
            <param name="factory">the service factory</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="factory"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.IServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.IServiceRegister.RegisterFactory``1(System.Type,Butler.Resolver.ServiceFactory{``0},Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a service factory.
            </summary>
            <typeparam name="TImplementation">type of the service implementation</typeparam>
            <param name="serviceType">the type of the service</param>
            <param name="factory">the service factory</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="factory"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.IServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <paramref name="serviceType"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.IServiceRegister.RegisterInstance``1(``0,Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers the specified <paramref name="instance"/> as a singleton.
            </summary>
            <typeparam name="TService">the type of the registration</typeparam>
            <param name="instance">the instance</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.IServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.IServiceRegister.RegisterInstance``2(``1,Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers the specified <paramref name="instance"/> as a singleton.
            </summary>
            <typeparam name="TService">the type of the registration</typeparam>
            <typeparam name="TImplementation">the type of the implementation</typeparam>
            <param name="instance">the instance</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.IServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="T:Butler.Register.ReadOnlyServiceRegister">
            <summary>
                A class that provides a read-only service register.
            </summary>
        </member>
        <member name="F:Butler.Register.ReadOnlyServiceRegister._registrations">
            <summary>
                The service registrations.
            </summary>
        </member>
        <member name="M:Butler.Register.ReadOnlyServiceRegister.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Type,Butler.Registration.IServiceRegistration})">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Register.ReadOnlyServiceRegister"/> class.
            </summary>
            <param name="registrations">the static registrations</param>
        </member>
        <member name="P:Butler.Register.ReadOnlyServiceRegister.IsReadOnly">
            <summary>
                Gets a value indicating whether new service registrations are not allowed.
            </summary>
        </member>
        <member name="P:Butler.Register.ReadOnlyServiceRegister.Registrations">
            <summary>
                Gets all service registrations in the register.
            </summary>
        </member>
        <member name="M:Butler.Register.ReadOnlyServiceRegister.AsReadOnly">
            <summary>
                Creates a read-only instance of the service register.
            </summary>
            <returns>the read-only service register</returns>
        </member>
        <member name="M:Butler.Register.ReadOnlyServiceRegister.FindRegistration(System.Type)">
            <summary>
                Finds the service registration for the specified <paramref name="type"/>.
            </summary>
            <param name="type">the type of the service to find the registration for</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="type"/> is <see langword="null"/>.
            </exception>
            <returns>the service registration</returns>
        </member>
        <member name="M:Butler.Register.ReadOnlyServiceRegister.FindRegistration``1">
            <summary>
                Finds the service registration for the specified <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">the type of the service to find the service for</typeparam>
            <returns>the service registration</returns>
        </member>
        <member name="M:Butler.Register.ReadOnlyServiceRegister.Register``2(Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a service registration for the specified <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">the type of the service</typeparam>
            <typeparam name="TImplementation">the type of the implementation of the service</typeparam>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ReadOnlyServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ReadOnlyServiceRegister.Register(System.Type,Butler.Registration.IServiceRegistration,Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers the specified <paramref name="registration"/>.
            </summary>
            <param name="type">the type of the registration</param>
            <param name="registration">the registration to register</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="type"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="registration"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ReadOnlyServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <paramref name="type"/> already exists
                and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ReadOnlyServiceRegister.Register``1(Butler.Registration.IServiceRegistration,Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers the specified <paramref name="registration"/>.
            </summary>
            <typeparam name="TService">the type of the registration</typeparam>
            <param name="registration">the registration to register</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="registration"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ReadOnlyServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and replace is <see langword="false"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ReadOnlyServiceRegister.RegisterDirect``2(Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a direct parameterless constructor service.
            </summary>
            <typeparam name="TService">the type of the service</typeparam>
            <typeparam name="TImplementation">the type of the implementation of the service</typeparam>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ReadOnlyServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ReadOnlyServiceRegister.RegisterFactory``1(Butler.Resolver.ServiceFactory{``0},Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a service factory.
            </summary>
            <typeparam name="TService">the service the factory provides</typeparam>
            <param name="factory">the service factory</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="factory"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ReadOnlyServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ReadOnlyServiceRegister.RegisterFactory``2(Butler.Resolver.ServiceFactory{``1},Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a service factory.
            </summary>
            <typeparam name="TService">the service the factory provides</typeparam>
            <typeparam name="TImplementation">type of the service implementation</typeparam>
            <param name="factory">the service factory</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="factory"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ReadOnlyServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ReadOnlyServiceRegister.RegisterFactory``1(System.Type,Butler.Resolver.ServiceFactory{``0},Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a service factory.
            </summary>
            <typeparam name="TImplementation">type of the service implementation</typeparam>
            <param name="serviceType">the type of the service</param>
            <param name="factory">the service factory</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="factory"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ReadOnlyServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <paramref name="serviceType"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ReadOnlyServiceRegister.RegisterInstance``1(``0,Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers the specified <paramref name="instance"/> as a singleton.
            </summary>
            <typeparam name="TService">the type of the registration</typeparam>
            <param name="instance">the instance</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ReadOnlyServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ReadOnlyServiceRegister.RegisterInstance``2(``1,Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers the specified <paramref name="instance"/> as a singleton.
            </summary>
            <typeparam name="TService">the type of the registration</typeparam>
            <typeparam name="TImplementation">the type of the implementation</typeparam>
            <param name="instance">the instance</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ReadOnlyServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ReadOnlyServiceRegister.ThrowReadOnlyException">
            <summary>
                Throws an exception that indicates that the service register is read-only.
            </summary>
            <exception cref="T:System.InvalidOperationException">always thrown</exception>
        </member>
        <member name="T:Butler.Register.RegistrationException">
            <summary>
                An exception for service registration errors.
            </summary>
        </member>
        <member name="M:Butler.Register.RegistrationException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Register.RegistrationException"/> class.
            </summary>
            <param name="message">the message</param>
        </member>
        <member name="T:Butler.Register.ServiceRegister">
            <summary>
                A class that manages service registrations.
            </summary>
        </member>
        <member name="F:Butler.Register.ServiceRegister._registrations">
            <summary>
                The registrations keyed by the service type.
            </summary>
        </member>
        <member name="F:Butler.Register.ServiceRegister._registrationsLock">
            <summary>
                Lock used for accessing the <see cref="F:Butler.Register.ServiceRegister._registrations"/> thread-safe.
            </summary>
        </member>
        <member name="M:Butler.Register.ServiceRegister.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Register.ServiceRegister"/> class.
            </summary>
        </member>
        <member name="P:Butler.Register.ServiceRegister.IsReadOnly">
            <summary>
                Gets a value indicating whether new service registrations are not allowed.
            </summary>
        </member>
        <member name="P:Butler.Register.ServiceRegister.Registrations">
            <summary>
                Gets all copy of the service registrations in the register.
            </summary>
        </member>
        <member name="P:Butler.Register.ServiceRegister.DefaultServiceLifetime">
            <summary>
                Gets or sets the default service lifetime when no specific lifetime was specified.
            </summary>
        </member>
        <member name="M:Butler.Register.ServiceRegister.AsReadOnly">
            <summary>
                Creates a read-only instance of the service register.
            </summary>
            <returns>the read-only service register</returns>
        </member>
        <member name="M:Butler.Register.ServiceRegister.FindRegistration(System.Type)">
            <summary>
                Finds the service registration for the specified <paramref name="type"/>.
            </summary>
            <param name="type">the type of the service to find the registration for</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="type"/> is <see langword="null"/>.
            </exception>
            <returns>the service registration</returns>
        </member>
        <member name="M:Butler.Register.ServiceRegister.FindRegistration``1">
            <summary>
                Finds the service registration for the specified <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">the type of the service to find the service for</typeparam>
            <returns>the service registration</returns>
        </member>
        <member name="M:Butler.Register.ServiceRegister.Register``2(Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a service registration for the specified <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">the type of the service</typeparam>
            <typeparam name="TImplementation">the type of the implementation of the service</typeparam>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ServiceRegister.Register(System.Type,Butler.Registration.IServiceRegistration,Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers the specified <paramref name="registration"/>.
            </summary>
            <param name="type">the type of the registration</param>
            <param name="registration">the registration to register</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="type"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="registration"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <paramref name="type"/> already exists
                and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ServiceRegister.Register``1(Butler.Registration.IServiceRegistration,Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers the specified <paramref name="registration"/>.
            </summary>
            <typeparam name="TService">the type of the registration</typeparam>
            <param name="registration">the registration to register</param>
            <param name="registrationMode">the service registration mode</param>
            <returns>the service registration added</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="registration"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ServiceRegister.RegisterDirect``2(Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a direct parameterless constructor service.
            </summary>
            <typeparam name="TService">the type of the service</typeparam>
            <typeparam name="TImplementation">the type of the implementation of the service</typeparam>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and replace is <see langword="false"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ServiceRegister.RegisterFactory``1(Butler.Resolver.ServiceFactory{``0},Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a service factory.
            </summary>
            <typeparam name="TService">the service the factory provides</typeparam>
            <param name="factory">the service factory</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="factory"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ServiceRegister.RegisterFactory``2(Butler.Resolver.ServiceFactory{``1},Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a service factory.
            </summary>
            <typeparam name="TService">the service the factory provides</typeparam>
            <typeparam name="TImplementation">type of the service implementation</typeparam>
            <param name="factory">the service factory</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="factory"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ServiceRegister.RegisterFactory``1(System.Type,Butler.Resolver.ServiceFactory{``0},Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers a service factory.
            </summary>
            <typeparam name="TImplementation">type of the service implementation</typeparam>
            <param name="serviceType">the type of the service</param>
            <param name="factory">the service factory</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="factory"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <paramref name="serviceType"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ServiceRegister.RegisterInstance``1(``0,Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers the specified <paramref name="instance"/> as a singleton.
            </summary>
            <typeparam name="TService">the type of the registration</typeparam>
            <param name="instance">the instance</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="M:Butler.Register.ServiceRegister.RegisterInstance``2(``1,Butler.Register.ServiceRegistrationMode)">
            <summary>
                Registers the specified <paramref name="instance"/> as a singleton.
            </summary>
            <typeparam name="TService">the type of the registration</typeparam>
            <typeparam name="TImplementation">the type of the implementation</typeparam>
            <param name="instance">the instance</param>
            <param name="registrationMode">the service registration mode</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the register is read-only ( <see cref="P:Butler.Register.ServiceRegister.IsReadOnly"/>).
            </exception>
            <exception cref="T:Butler.Register.RegistrationException">
                thrown if a registration with the specified <typeparamref name="TService"/> already
                exists and the specified <paramref name="registrationMode"/> is not
                <see cref="F:Butler.Register.ServiceRegistrationMode.Replace"/> or <see cref="F:Butler.Register.ServiceRegistrationMode.Ignore"/>.
            </exception>
        </member>
        <member name="T:Butler.Register.ServiceRegistrationMode">
            <summary>
                A set of different service registration modes.
            </summary>
        </member>
        <member name="F:Butler.Register.ServiceRegistrationMode.Default">
            <summary>
                Denotes that an exception should be thrown if a service registration already exists
                for the specified service type.
            </summary>
        </member>
        <member name="F:Butler.Register.ServiceRegistrationMode.Replace">
            <summary>
                Denotes that the existing service registration should be replaced with the new.
            </summary>
        </member>
        <member name="F:Butler.Register.ServiceRegistrationMode.Ignore">
            <summary>
                Denotes that the existing service registration should be kept and the new service
                registration should be dropped without registering.
            </summary>
        </member>
        <member name="T:Butler.Registration.DirectRegistration`1">
            <summary>
                Provides an <see cref="T:Butler.Registration.IServiceRegistration"/> for direct parameterless constructors.
            </summary>
            <typeparam name="TImplementation">the service implementation</typeparam>
        </member>
        <member name="P:Butler.Registration.DirectRegistration`1.ServiceLifetime">
            <summary>
                Gets the lifetime of the service.
            </summary>
        </member>
        <member name="M:Butler.Registration.DirectRegistration`1.Create(Butler.Resolver.ServiceResolveContext)">
            <summary>
                Creates the instance.
            </summary>
            <param name="context">the current resolver context</param>
            <returns>the instance</returns>
        </member>
        <member name="T:Butler.Registration.FactoryRegistration`1">
            <summary>
                Provides a factory registration.
            </summary>
            <typeparam name="TService">the service type</typeparam>
        </member>
        <member name="M:Butler.Registration.FactoryRegistration`1.#ctor(Butler.Resolver.ServiceFactory{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Registration.FactoryRegistration`1"/> class.
            </summary>
            <param name="factory">the service factory delegate</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="factory"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Butler.Registration.FactoryRegistration`1.ServiceLifetime">
            <summary>
                Gets the lifetime of the service.
            </summary>
        </member>
        <member name="P:Butler.Registration.FactoryRegistration`1.Factory">
            <summary>
                Gets the service factory.
            </summary>
        </member>
        <member name="M:Butler.Registration.FactoryRegistration`1.Create(Butler.Resolver.ServiceResolveContext)">
            <summary>
                Creates the instance.
            </summary>
            <param name="context">the current resolver context</param>
            <returns>the instance</returns>
        </member>
        <member name="T:Butler.Registration.InstanceRegistration">
            <summary>
                Registration of a static instance.
            </summary>
        </member>
        <member name="M:Butler.Registration.InstanceRegistration.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Registration.InstanceRegistration"/> class.
            </summary>
            <param name="instance">the static instance</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="instance"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Butler.Registration.InstanceRegistration.ServiceLifetime">
            <summary>
                Gets the lifetime of the service.
            </summary>
        </member>
        <member name="P:Butler.Registration.InstanceRegistration.Instance">
            <summary>
                Gets the static instance.
            </summary>
        </member>
        <member name="M:Butler.Registration.InstanceRegistration.Create(Butler.Resolver.ServiceResolveContext)">
            <summary>
                Creates the instance.
            </summary>
            <param name="context">the current resolver context</param>
            <returns>the instance</returns>
        </member>
        <member name="T:Butler.Registration.IServiceRegistration">
            <summary>
                Interface for basic service registrations.
            </summary>
        </member>
        <member name="M:Butler.Registration.IServiceRegistration.Create(Butler.Resolver.ServiceResolveContext)">
            <summary>
                Creates the instance.
            </summary>
            <param name="context">the current resolver context</param>
            <returns>the instance</returns>
        </member>
        <member name="P:Butler.Registration.IServiceRegistration.ServiceLifetime">
            <summary>
                Gets the lifetime of the service.
            </summary>
        </member>
        <member name="T:Butler.Registration.ServiceLifetime">
            <summary>
                A set of different service lifetimes.
            </summary>
        </member>
        <member name="F:Butler.Registration.ServiceLifetime.Singleton">
            <summary>
                Denotes that each resolve the same instance is used.
            </summary>
        </member>
        <member name="F:Butler.Registration.ServiceLifetime.Scoped">
            <summary>
                Denotes that each resolve in the same scope is created new.
            </summary>
        </member>
        <member name="F:Butler.Registration.ServiceLifetime.Transient">
            <summary>
                Denotes that each resolve the instance is created new.
            </summary>
        </member>
        <member name="T:Butler.Registration.ServiceRegistration`1">
            <summary>
                Basic service registration.
            </summary>
            <typeparam name="TImplementation">the type of the implementation</typeparam>
        </member>
        <member name="M:Butler.Registration.ServiceRegistration`1.#ctor(Butler.Lifetime.IServiceLifetime)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Registration.ServiceRegistration`1"/> class.
            </summary>
            <param name="serviceLifetime">the initial service lifetime to use</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceLifetime"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Butler.Registration.ServiceRegistration`1.Create(Butler.Resolver.ServiceResolveContext)">
            <summary>
                Creates the instance.
            </summary>
            <param name="context">the current resolver context</param>
            <returns>the instance</returns>
        </member>
        <member name="P:Butler.Registration.ServiceRegistration`1.ServiceLifetime">
            <summary>
                Gets the lifetime of the service.
            </summary>
        </member>
        <member name="T:Butler.Resolver.BaseServiceResolver">
            <summary>
                Base implementation of an <see cref="T:Butler.Resolver.IServiceResolver"/>.
            </summary>
        </member>
        <member name="M:Butler.Resolver.BaseServiceResolver.System#IServiceProvider#GetService(System.Type)">
            <summary>
                Resolves a service of the specified <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">the type of the service to resolve</param>
            <returns>the resolved service</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceType"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="F:Butler.Resolver.BaseServiceResolver.DefaultMaximumDepth">
            <summary>
                The default value for the <see cref="P:Butler.Resolver.BaseServiceResolver.MaximumDepth"/> property.
            </summary>
        </member>
        <member name="F:Butler.Resolver.BaseServiceResolver.DefaultServiceConstructionMode">
            <summary>
                The default value for the <see cref="P:Butler.Resolver.BaseServiceResolver.ServiceConstructionMode"/> property.
            </summary>
        </member>
        <member name="F:Butler.Resolver.BaseServiceResolver._maximumDepth">
            <summary>
                The current <see cref="P:Butler.Resolver.BaseServiceResolver.MaximumDepth"/>.
            </summary>
        </member>
        <member name="F:Butler.Resolver.BaseServiceResolver._serviceConstructionMode">
            <summary>
                The current <see cref="P:Butler.Resolver.BaseServiceResolver.ServiceConstructionMode"/>.
            </summary>
        </member>
        <member name="P:Butler.Resolver.BaseServiceResolver.MaximumDepth">
            <summary>
                Gets or sets the maximum service resolve depth (used to detect self-referencing loops).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified value is zero or negative.
            </exception>
        </member>
        <member name="P:Butler.Resolver.BaseServiceResolver.ServiceConstructionMode">
            <summary>
                Gets or sets the resolver's <see cref="P:Butler.Resolver.BaseServiceResolver.ServiceConstructionMode"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified value is not defined in the
                <see cref="P:Butler.Resolver.BaseServiceResolver.ServiceConstructionMode"/> enumeration.
            </exception>
            <exception cref="T:System.ArgumentException">thrown if the specified value is <see cref="F:Butler.Resolver.ServiceConstructionMode.Default"/></exception>
        </member>
        <member name="M:Butler.Resolver.BaseServiceResolver.Resolve(System.Type,System.Object,Butler.Resolver.ServiceResolveContext,Butler.Resolver.ServiceConstructionMode)">
            <summary>
                Resolves a service of the specified <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">the type of the service to resolve</param>
            <param name="scopeKey">
                the scope key for resolving the service; if <see langword="null"/> the global scope
                is used.
            </param>
            <param name="context">
                the parent resolve context; if <see langword="null"/> a new
                <see cref="T:Butler.Resolver.ServiceResolveContext"/> is created.
            </param>
            <param name="constructionMode">
                the service construction mode; which defines the behavior for resolving constructors
                for a service implementation type.
            </param>
            <returns>the resolved service</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Butler.Util.ResolverException">thrown if the service resolve failed.</exception>
            <exception cref="T:System.ObjectDisposedException">thrown if the container is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the maximum service resolve depth was exceeded.
            </exception>
        </member>
        <member name="M:Butler.Resolver.BaseServiceResolver.Resolve``1(System.Object,Butler.Resolver.ServiceResolveContext,Butler.Resolver.ServiceConstructionMode)">
            <summary>
                Resolves a service of the specified <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">the type of the service to resolve</typeparam>
            <param name="scopeKey">
                the scope key for resolving the service; if <see langword="null"/> the global scope
                is used.
            </param>
            <param name="context">
                the parent resolve context; if <see langword="null"/> a new
                <see cref="T:Butler.Resolver.ServiceResolveContext"/> is created.
            </param>
            <param name="constructionMode">
                the service construction mode; which defines the behavior for resolving constructors
                for a service implementation type.
            </param>
            <returns>the resolved service</returns>
            <exception cref="T:Butler.Util.ResolverException">thrown if the service resolve failed.</exception>
            <exception cref="T:System.ObjectDisposedException">thrown if the container is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the maximum service resolve depth was exceeded.
            </exception>
        </member>
        <member name="M:Butler.Resolver.BaseServiceResolver.ResolveLazy``1(System.Object,Butler.Resolver.ServiceResolveContext,Butler.Resolver.ServiceConstructionMode)">
            <summary>
                Resolves a lazy-initialized service of the specified <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">the type of the service</typeparam>
            <param name="scopeKey">
                the scope key for resolving the service; if <see langword="null"/> the global scope
                is used.
            </param>
            <param name="context">
                the parent resolve context; if <see langword="null"/> a new
                <see cref="T:Butler.Resolver.ServiceResolveContext"/> is created.
            </param>
            <param name="constructionMode">
                the service construction mode; which defines the behavior for resolving constructors
                for a service implementation type.
            </param>
            <returns>a wrapper that supports lazy-initialization of the specified <typeparamref name="TService"/></returns>
            <exception cref="T:Butler.Util.ResolverException">thrown if the service resolve failed.</exception>
            <exception cref="T:System.ObjectDisposedException">thrown if the container is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the maximum service resolve depth was exceeded.
            </exception>
        </member>
        <member name="T:Butler.Resolver.IServiceResolver">
            <summary>
                Interface for service resolvers.
            </summary>
        </member>
        <member name="P:Butler.Resolver.IServiceResolver.MaximumDepth">
            <summary>
                Gets or sets the maximum service resolve depth (used to detect self-referencing loops).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified value is zero or negative.
            </exception>
        </member>
        <member name="P:Butler.Resolver.IServiceResolver.ServiceConstructionMode">
            <summary>
                Gets or sets the resolvers's <see cref="P:Butler.Resolver.IServiceResolver.ServiceConstructionMode"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified value is not defined in the
                <see cref="P:Butler.Resolver.IServiceResolver.ServiceConstructionMode"/> enumeration.
            </exception>
            <exception cref="T:System.ArgumentException">thrown if the specified value is <see cref="F:Butler.Resolver.ServiceConstructionMode.Default"/></exception>
        </member>
        <member name="M:Butler.Resolver.IServiceResolver.Resolve(System.Type,System.Object,Butler.Resolver.ServiceResolveContext,Butler.Resolver.ServiceConstructionMode)">
            <summary>
                Resolves a service of the specified <paramref name="serviceType"/>.
            </summary>
            <param name="scopeKey">
                the scope key for resolving the service; if <see langword="null"/> the global scope
                is used.
            </param>
            <param name="serviceType">the type of the service to resolve</param>
            <param name="context">
                the parent resolve context; if <see langword="null"/> a new
                <see cref="T:Butler.Resolver.ServiceResolveContext"/> is created.
            </param>
            <param name="constructionMode">
                the service construction mode; which defines the behavior for resolving constructors
                for a service implementation type.
            </param>
            <returns>the resolved service</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Butler.Util.ResolverException">thrown if the service resolve failed.</exception>
            <exception cref="T:System.ObjectDisposedException">thrown if the container is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the maximum service resolve depth was exceeded.
            </exception>
        </member>
        <member name="M:Butler.Resolver.IServiceResolver.Resolve``1(System.Object,Butler.Resolver.ServiceResolveContext,Butler.Resolver.ServiceConstructionMode)">
            <summary>
                Resolves a service of the specified <typeparamref name="TService"/>.
            </summary>
            <param name="scopeKey">
                the scope key for resolving the service; if <see langword="null"/> the global scope
                is used.
            </param>
            <param name="context">
                the parent resolve context; if <see langword="null"/> a new
                <see cref="T:Butler.Resolver.ServiceResolveContext"/> is created.
            </param>
            <param name="constructionMode">
                the service construction mode; which defines the behavior for resolving constructors
                for a service implementation type.
            </param>
            <typeparam name="TService">the type of the service to resolve</typeparam>
            <returns>the resolved service</returns>
            <exception cref="T:Butler.Util.ResolverException">thrown if the service resolve failed.</exception>
            <exception cref="T:System.ObjectDisposedException">thrown if the container is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the maximum service resolve depth was exceeded.
            </exception>
        </member>
        <member name="M:Butler.Resolver.IServiceResolver.ResolveLazy``1(System.Object,Butler.Resolver.ServiceResolveContext,Butler.Resolver.ServiceConstructionMode)">
            <summary>
                Resolves a lazy-initialized service of the specified <typeparamref name="TService"/>.
            </summary>
            <param name="context">
                the parent resolve context; if <see langword="null"/> a new
                <see cref="T:Butler.Resolver.ServiceResolveContext"/> is created.
            </param>
            <param name="scopeKey">
                the scope key for resolving the service; if <see langword="null"/> the global scope
                is used.
            </param>
            <param name="constructionMode">
                the service construction mode; which defines the behavior for resolving constructors
                for a service implementation type.
            </param>
            <typeparam name="TService">the type of the service</typeparam>
            <returns>a wrapper that supports lazy-initialization of the specified <typeparamref name="TService"/></returns>
            <exception cref="T:Butler.Util.ResolverException">thrown if the service resolve failed.</exception>
            <exception cref="T:System.ObjectDisposedException">thrown if the container is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the maximum service resolve depth was exceeded.
            </exception>
        </member>
        <member name="T:Butler.Resolver.PreferConstructorAttribute">
            <summary>
                An attribute that controls the selector choice of a service resolver. When applied to a
                constructor the constructor is preferred to be used for service resolve.
            </summary>
        </member>
        <member name="T:Butler.Resolver.ServiceConstructionMode">
            <summary>
                A set of different service construction modes.
            </summary>
        </member>
        <member name="F:Butler.Resolver.ServiceConstructionMode.Default">
            <summary>
                Denotes that the default <see cref="T:Butler.Resolver.ServiceConstructionMode"/> should be used for the
                current context.
            </summary>
        </member>
        <member name="F:Butler.Resolver.ServiceConstructionMode.Parent">
            <summary>
                Denotes that the <see cref="T:Butler.Resolver.ServiceConstructionMode"/> should be inherited from the
                parent resolve, e.g. when resolving a dependency of a service and the parent mode is
                set, then the <see cref="T:Butler.Resolver.ServiceConstructionMode"/> of the parent resolve is used. If
                the service is resolved directly and <see cref="F:Butler.Resolver.ServiceConstructionMode.Parent"/> is set then
                <see cref="F:Butler.Resolver.ServiceConstructionMode.Default"/> is used.
            </summary>
        </member>
        <member name="F:Butler.Resolver.ServiceConstructionMode.PreferParameterlessConstructor">
            <summary>
                Denotes that the parameter-less constructor should be preferred.
            </summary>
        </member>
        <member name="F:Butler.Resolver.ServiceConstructionMode.PreferComplexConstructor">
            <summary>
                Denotes that the most complex constructor should be searched that can be created with
                the current registrations.
            </summary>
        </member>
        <member name="F:Butler.Resolver.ServiceConstructionMode.Mixed">
            <summary>
                Denotes that the constructor with the <see cref="T:Butler.Resolver.PreferConstructorAttribute"/> should
                be used. If no constructor has the <see cref="T:Butler.Resolver.PreferConstructorAttribute"/> then the
                same behavior as <see cref="F:Butler.Resolver.ServiceConstructionMode.PreferComplexConstructor"/> is used.
            </summary>
        </member>
        <member name="T:Butler.Resolver.ServiceFactory`1">
            <summary>
                Delegate for service factories.
            </summary>
            <typeparam name="T">the type of the implementation the factory provides</typeparam>
            <param name="resolver">the current resolver context</param>
            <returns>the service instance</returns>
        </member>
        <member name="T:Butler.Resolver.ServiceResolveContext">
            <summary>
                A compound of required information while resolving a service.
            </summary>
        </member>
        <member name="M:Butler.Resolver.ServiceResolveContext.#ctor(Butler.Resolver.IServiceResolver,Butler.Register.IServiceRegister,Butler.Resolver.ServiceConstructionMode,System.Type,System.Type,Butler.Util.TraceBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Resolver.ServiceResolveContext"/> class.
            </summary>
            <param name="resolver">the service resolver using the context</param>
            <param name="register">the service register</param>
            <param name="constructionMode">the service construction mode for the resolve</param>
            <param name="serviceType">the type of the service being resolved</param>
            <param name="parentType">the type of the parent</param>
            <param name="traceBuilder">
                the trace builder; if <see langword="null"/> a new instance will be created.
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="resolver"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="register"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceType"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Butler.Resolver.ServiceResolveContext.#ctor(Butler.Resolver.ServiceResolveContext,Butler.Resolver.ServiceConstructionMode,System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Resolver.ServiceResolveContext"/> of the
                specified <paramref name="parentContext"/>.
            </summary>
            <remarks>The depth automatically increases.</remarks>
            <param name="parentContext">the parent context to take the data from</param>
            <param name="constructionMode"></param>
            <param name="serviceType">the type of the new service being resolved</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="parentContext"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the maximum service resolve depth was exceeded.
            </exception>
        </member>
        <member name="P:Butler.Resolver.ServiceResolveContext.ConstructionMode">
            <summary>
                Gets the service construction mode for the resolve.
            </summary>
        </member>
        <member name="P:Butler.Resolver.ServiceResolveContext.Depth">
            <summary>
                Gets the actual resolver depth. If a specific depth is reached an exception is thrown.
            </summary>
        </member>
        <member name="P:Butler.Resolver.ServiceResolveContext.ParentType">
            <summary>
                Gets the type of the parent being resolved (if not <see langword="null"/>, then the
                <see cref="P:Butler.Resolver.ServiceResolveContext.ServiceType"/> is required to resolved as a dependency for the
                <see cref="P:Butler.Resolver.ServiceResolveContext.ParentType"/> service, <see langword="null"/> if the service is being
                resolved directly).
            </summary>
        </member>
        <member name="P:Butler.Resolver.ServiceResolveContext.Register">
            <summary>
                Gets the corresponding service register to resolve from.
            </summary>
        </member>
        <member name="P:Butler.Resolver.ServiceResolveContext.Resolver">
            <summary>
                Gets the resolver that was used to resolve the service.
            </summary>
        </member>
        <member name="P:Butler.Resolver.ServiceResolveContext.ServiceType">
            <summary>
                Gets the type of the service being service.
            </summary>
        </member>
        <member name="P:Butler.Resolver.ServiceResolveContext.TraceBuilder">
            <summary>
                Gets the trace builder used for useful output on resolve failures to make it easier
                to find resolution errors and their cause.
            </summary>
            <remarks>
                Please note that this property is only available when the Debug configuration is used.
            </remarks>
        </member>
        <member name="T:Butler.RootContainer">
            <summary>
                An inversion of control (IoC) container that supports resolving services.
            </summary>
        </member>
        <member name="F:Butler.RootContainer._lifetimes">
            <summary>
                A dictionary containing service lifetimes storing an <see cref="T:Butler.Lifetime.ILifetimeManager"/> class.
            </summary>
        </member>
        <member name="F:Butler.RootContainer._disposed">
            <summary>
                A value indicating whether the root container has been disposed.
            </summary>
        </member>
        <member name="M:Butler.RootContainer.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.RootContainer"/> class.
            </summary>
        </member>
        <member name="M:Butler.RootContainer.GetEnumerator">
            <summary>
                Gets the service registration enumerator.
            </summary>
            <returns>the service registration enumerator</returns>
        </member>
        <member name="M:Butler.RootContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Gets the service registration enumerator.
            </summary>
            <returns>the service registration enumerator</returns>
        </member>
        <member name="M:Butler.RootContainer.Resolve(System.Type,System.Object,Butler.Resolver.ServiceResolveContext,Butler.Resolver.ServiceConstructionMode)">
            <summary>
                Resolves a service of the specified <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">the type of the service to resolve</param>
            <param name="scopeKey">
                the scope key for resolving the service; if <see langword="null"/> the global scope
                is used.
            </param>
            <param name="parentContext">
                the parent resolve context; if <see langword="null"/> a new
                <see cref="T:Butler.Resolver.ServiceResolveContext"/> is created.
            </param>
            <param name="constructionMode">
                the service construction mode; which defines the behavior for resolving constructors
                for a service implementation type.
            </param>
            <returns>the resolved service</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Butler.Util.ResolverException">thrown if the service resolve failed.</exception>
            <exception cref="T:System.ObjectDisposedException">thrown if the container is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the maximum service resolve depth was exceeded.
            </exception>
        </member>
        <member name="M:Butler.RootContainer.DisposeAsync">
            <summary>
                Disposes the root container asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Butler.Util.Debug.RegistrationProxy">
            <summary>
                An union of a service registration alias ( <see cref="P:Butler.Util.Debug.RegistrationProxy.Name"/>), a service type (
                <see cref="P:Butler.Util.Debug.RegistrationProxy.ServiceType"/>) and a service registration ( <see cref="P:Butler.Util.Debug.RegistrationProxy.Registration"/>) used
                for advanced debugging views.
            </summary>
        </member>
        <member name="M:Butler.Util.Debug.RegistrationProxy.#ctor(System.String,System.Type,Butler.Registration.IServiceRegistration)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Util.Debug.RegistrationProxy"/> class.
            </summary>
            <param name="name">the name / alias of the registration</param>
            <param name="serviceType">the type of the service</param>
            <param name="registration">the registration</param>
        </member>
        <member name="P:Butler.Util.Debug.RegistrationProxy.Name">
            <summary>
                Gets the key.
            </summary>
        </member>
        <member name="P:Butler.Util.Debug.RegistrationProxy.Registration">
            <summary>
                Gets the associated value.
            </summary>
        </member>
        <member name="P:Butler.Util.Debug.RegistrationProxy.ServiceType">
            <summary>
                Gets the item.
            </summary>
        </member>
        <member name="T:Butler.Util.Debug.ResolverSettingsProxy">
            <summary>
                A class for wrapping the resolver settings into a category.
            </summary>
        </member>
        <member name="M:Butler.Util.Debug.ResolverSettingsProxy.#ctor(Butler.Resolver.IServiceResolver)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Util.Debug.ResolverSettingsProxy"/> class.
            </summary>
            <param name="serviceResolver">the service resolver bound to</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceResolver"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Butler.Util.Debug.ResolverSettingsProxy.ServiceResolver">
            <summary>
                Gets the service resolver bound to.
            </summary>
        </member>
        <member name="P:Butler.Util.Debug.ResolverSettingsProxy.MaximumDepth">
            <summary>
                Gets or sets the maximum depth of the <see cref="P:Butler.Util.Debug.ResolverSettingsProxy.ServiceResolver"/>.
            </summary>
        </member>
        <member name="P:Butler.Util.Debug.ResolverSettingsProxy.ServiceConstructionMode">
            <summary>
                Gets or sets the service construction mode of the <see cref="P:Butler.Util.Debug.ResolverSettingsProxy.ServiceResolver"/>.
            </summary>
        </member>
        <member name="T:Butler.Util.Debug.RootContainerProxy">
            <summary>
                Debugger type proxy for the <see cref="P:Butler.Util.Debug.RootContainerProxy.RootContainer"/> type.
            </summary>
        </member>
        <member name="M:Butler.Util.Debug.RootContainerProxy.#ctor(Butler.IRootContainer)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Util.Debug.RootContainerProxy"/> class.
            </summary>
            <param name="rootContainer">the root container bound to</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="rootContainer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Butler.Util.Debug.RootContainerProxy.Settings">
            <summary>
                Gets a proxy holding debugger information of settings for the root container.
            </summary>
        </member>
        <member name="P:Butler.Util.Debug.RootContainerProxy.Registrations">
            <summary>
                Gets the container registrations.
            </summary>
        </member>
        <member name="P:Butler.Util.Debug.RootContainerProxy.RootContainer">
            <summary>
                Gets the root container bound to.
            </summary>
        </member>
        <member name="T:Butler.Util.Reflector">
            <summary>
                An utility class for resolving a service with dependencies from an <see cref="T:Butler.Resolver.IServiceResolver"/>.
            </summary>
        </member>
        <member name="M:Butler.Util.Reflector.CanUseConstructor(Butler.Register.IServiceRegister,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>
                Gets a value indicating whether the specified <paramref name="parameters"/> can be
                resolved using the specified <paramref name="register"/>.
            </summary>
            <param name="register">the register to use</param>
            <param name="parameters">the service implementation type constructor parameters</param>
            <returns>
                a value indicating whether the specified <paramref name="parameters"/> can be
                resolved using the specified <paramref name="register"/>
            </returns>
        </member>
        <member name="M:Butler.Util.Reflector.Resolve``1(Butler.Resolver.ServiceResolveContext)">
            <summary>
                Creates a new instance of the specified service type (in <paramref name="context"/>).
            </summary>
            <typeparam name="TImplementation">the type of the implementation to construct</typeparam>
            <param name="context">the resolve context</param>
            <returns>the service instance</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Butler.Util.Reflector.Resolve(System.Type,Butler.Resolver.ServiceResolveContext)">
            <summary>
                Creates a new instance of the specified service type (in <paramref name="context"/>).
            </summary>
            <param name="implementationType">the type of the implementation to construct</param>
            <param name="context">the resolve context</param>
            <returns>the service instance</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="implementationType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Butler.Util.Reflector.ResolveConstructor(Butler.Resolver.ServiceResolveContext,System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo},System.Type,Butler.Resolver.ServiceConstructionMode)">
            <summary>
                Resolves the matching constructor for the specified
                <paramref name="implementationType"/> with respecting the specified <paramref name="constructionMode"/>.
            </summary>
            <param name="context">the current resolver context</param>
            <param name="availableConstructors">
                an enumerable that enumerates through the available constructors for the specified <paramref name="implementationType"/>.
            </param>
            <param name="implementationType">
                the type of the service implementation to resolve the constructor for
            </param>
            <param name="constructionMode">the service construction mode.</param>
            <returns>the constructor chosen fro the specified <paramref name="implementationType"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="constructionMode"/> is unsupported or not
                defined in the <see cref="T:Butler.Resolver.ServiceConstructionMode"/> enumeration.
            </exception>
            <exception cref="T:Butler.Util.ResolverException">
                thrown if no passable constructor was found for the specified <paramref name="implementationType"/>
            </exception>
        </member>
        <member name="T:Butler.Util.ResolverException">
            <summary>
                Exception for resolver failures.
            </summary>
        </member>
        <member name="F:Butler.Util.ResolverException.UnknownErrorMessage">
            <summary>
                The message used when no message is set explicitly.
            </summary>
        </member>
        <member name="M:Butler.Util.ResolverException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Util.ResolverException"/> class.
            </summary>
            <param name="message">the message</param>
        </member>
        <member name="M:Butler.Util.ResolverException.#ctor(System.String,Butler.Resolver.ServiceResolveContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Util.ResolverException"/> class.
            </summary>
            <param name="message">the message</param>
            <param name="context">the current resolver context</param>
        </member>
        <member name="M:Butler.Util.ResolverException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Util.ResolverException"/> class.
            </summary>
        </member>
        <member name="M:Butler.Util.ResolverException.#ctor(Butler.Resolver.ServiceResolveContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Util.ResolverException"/> class.
            </summary>
            <param name="context">the current resolver context</param>
        </member>
        <member name="M:Butler.Util.ResolverException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Util.ResolverException"/> class.
            </summary>
            <param name="message">the message</param>
            <param name="innerException">the inner nested exception</param>
        </member>
        <member name="M:Butler.Util.ResolverException.#ctor(System.String,Butler.Resolver.ServiceResolveContext,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Util.ResolverException"/> class.
            </summary>
            <param name="message">the message</param>
            <param name="context">the current resolver context</param>
            <param name="innerException">the inner nested exception</param>
        </member>
        <member name="P:Butler.Util.ResolverException.Context">
            <summary>
                Gets the associated resolve context (may be <see langword="null"/>).
            </summary>
        </member>
        <member name="M:Butler.Util.ResolverException.BuildMessage(System.String,Butler.Resolver.ServiceResolveContext)">
            <summary>
                Builds the message for the specified <paramref name="context"/>.
            </summary>
            <remarks>All parameters are optional.</remarks>
            <param name="message">the base message</param>
            <param name="context">the current resolver context</param>
            <returns>the message build</returns>
        </member>
        <member name="T:Butler.Util.TraceBuilder">
            <summary>
                An utility class that is useful for building traces when resolving or registering services.
            </summary>
        </member>
        <member name="F:Butler.Util.TraceBuilder._entries">
            <summary>
                A list holding the trace elements.
            </summary>
        </member>
        <member name="F:Butler.Util.TraceBuilder._entryLock">
            <summary>
                The lock for the entries.
            </summary>
        </member>
        <member name="M:Butler.Util.TraceBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Util.TraceBuilder"/> class.
            </summary>
        </member>
        <member name="P:Butler.Util.TraceBuilder.Elements">
            <summary>
                Gets the trace elements.
            </summary>
        </member>
        <member name="P:Butler.Util.TraceBuilder.DebuggerDisplay">
            <summary>
                Gets the debugger display value.
            </summary>
        </member>
        <member name="M:Butler.Util.TraceBuilder.Append(System.String)">
            <summary>
                Appends the specified <paramref name="content"/> to the trace.
            </summary>
            <param name="content">the trace content</param>
            <returns>the <see cref="T:Butler.Util.TraceBuilder"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="content"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Butler.Util.TraceBuilder.Append(Butler.Util.TraceLevel,System.String)">
            <summary>
                Appends the specified <paramref name="content"/> to the trace.
            </summary>
            <param name="level">the trace level</param>
            <param name="content">the trace content</param>
            <returns>the <see cref="T:Butler.Util.TraceBuilder"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="content"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Butler.Util.TraceBuilder.Append(Butler.Util.TraceElement)">
            <summary>
                Appends the specified <paramref name="element"/> to the trace elements list.
            </summary>
            <param name="element">the element to add</param>
            <returns>the <see cref="T:Butler.Util.TraceBuilder"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="element"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Butler.Util.TraceBuilder.AppendConstructorResolve(System.Type,System.Reflection.ConstructorInfo)">
            <summary>
                Appends a trace element that indicates that a service of type
                <paramref name="serviceType"/> is tried to resolve using the specified <paramref name="constructor"/>.
            </summary>
            <param name="serviceType">the type of the service being resolved</param>
            <param name="constructor">the constructor</param>
            <returns>the <see cref="T:Butler.Util.TraceBuilder"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="constructor"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Butler.Util.TraceBuilder.AppendResolve(System.Type)">
            <summary>
                Appends a trace element that indicates that a service of type
                <paramref name="serviceType"/> is resolving.
            </summary>
            <param name="serviceType">the type of the service being resolved</param>
            <returns>the <see cref="T:Butler.Util.TraceBuilder"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceType"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Butler.Util.TraceBuilder.AppendResolved(System.Type,System.Type)">
            <summary>
                Appends a trace element that indicates that a service was resolved successfully.
            </summary>
            <param name="serviceType">the type of the service being resolved</param>
            <param name="implementationType">the implementation of the service created</param>
            <returns>the <see cref="T:Butler.Util.TraceBuilder"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="implementationType"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Butler.Util.TraceBuilder.AppendResolveFail(System.Type,System.Boolean)">
            <summary>
                Appends a trace element that indicates that a service resolve failed.
            </summary>
            <param name="serviceType">the type of the service being resolved</param>
            <param name="critical">
                a value indicating whether the resolve failure is critical (e.g. there are no service
                alternatives to resolve).
            </param>
            <returns>the <see cref="T:Butler.Util.TraceBuilder"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="serviceType"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Butler.Util.TraceBuilder.Clear">
            <summary>
                Clears the trace.
            </summary>
        </member>
        <member name="M:Butler.Util.TraceBuilder.ToString">
            <summary>
                Builds a <see cref="T:System.String"/> representation of the object.
            </summary>
            <returns>a <see cref="T:System.String"/> representation of the object</returns>
        </member>
        <member name="T:Butler.Util.TraceElement">
            <summary>
                A class holding the information of a trace element.
            </summary>
        </member>
        <member name="M:Butler.Util.TraceElement.#ctor(Butler.Util.TraceLevel,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Butler.Util.TraceElement"/> class.
            </summary>
            <param name="level">the level of the trace entry</param>
            <param name="content">the content of the trace element</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="content"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Butler.Util.TraceElement.Level">
            <summary>
                Gets the level of the trace entry.
            </summary>
        </member>
        <member name="P:Butler.Util.TraceElement.Content">
            <summary>
                Gets the content of the trace element.
            </summary>
        </member>
        <member name="T:Butler.Util.TraceLevel">
            <summary>
                A set of trace levels.
            </summary>
        </member>
        <member name="F:Butler.Util.TraceLevel.Info">
            <summary>
                Denotes that the trace entry is only for information.
            </summary>
        </member>
        <member name="F:Butler.Util.TraceLevel.Warning">
            <summary>
                Denotes that for example a resolve failed or a constructor did not match, but the
                resolve can continue.
            </summary>
        </member>
        <member name="F:Butler.Util.TraceLevel.Error">
            <summary>
                Denotes that an error occurred (e.g. resolve failed, etc.).
            </summary>
        </member>
    </members>
</doc>
